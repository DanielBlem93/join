// drag and drop

// let todos = [{
//     'id': 1,
//     'category': 'open',
//     'task-category': 'Design',
//     'title': 'Website redesign',
//     'text': 'Modify the contents of the main website...',
//     'done-fraction': '1/2',
//     'members': ['AM', 'AS', 'EF'],
//     'priority': 'low',
//     'selected-color': 'orange'
// },  
// {
//     'id': 2,
//     'category': 'progress',
//     'task-category': 'Sales',
//     'title': 'Call potential clients',
//     'text': 'Make the product presentation to prospective buyers',
//     'done-fraction': '',
//     'members': ['EF', 'AM', '+2'],
//     'priority': 'urgent',
//     'selected-color': 'purple'

// }, 
// {
//     'id': 3,
//     'category': 'feedback',
//     'task-category': 'Backoffice',
//     'title': 'Accounting invoices ',
//     'text': 'Write open invoices for customer',
//     'done-fraction': '',
//     'members': ['AS', 'AM', '+3'],
//     'priority': 'medium',
//     'selected-color': 'lightblue'

// }]


// let members = [{
//     'firstName': 'Anton',
//     'lastName': 'Mayer',
//     'email': 'anton@gmail.com',
//     'selected-color': 'green',
//     'abbreviation': '',
//     'fullName': ''
// }, 
// {
//     'firstName': 'Anja',
//     'lastName': 'Schulz',
//     'email': 'schulz@hotmail.com',
//     'selected-color': 'blue',
//     'abbreviation': '',
//     'fullName': ''

// }, 
// {
//     'firstName': 'Eva',
//     'lastName': 'Fischer',
//     'email': 'fischer@gmail.com',
//     'selected-color': 'yellow',
//     'abbreviation': '',
//     'fullName': ''
// }];

let todos = [];
let currentToDos = [];
let currentDraggedElement;

async function addTask() {
    let addTasks = JSON.parse(await getItem('task'));
    for (let taskArray of addTasks) {
        for (let task of taskArray) {
            let existingTask = todos.find(t => t.taskID === task.taskID);
            if (!existingTask) {
                todos.push({
                    'id': todos.length,
                    'category': 'open',
                    'task-category': task.category,
                    'title': task.title,
                    'text': task.description,
                    'done-fraction': '',
                    'members': task.persons[0].name,
                    'priority': task.priority,
                    'selected-color': '',
                    'date': task.date,
                    'taskID': task.taskID
                })
            }
        }
    }
    updateHTML();
}
async function getStoredTodos() {
    const storedTodos = await getItem('todos');
    if (storedTodos) {
      todos = JSON.parse(storedTodos);
    }
  }
  



/**
 * This function is used to initiate the HTML page.  
 * It will include the template for the header and navigation. 
 * In addition, the toDo divs are generated.
 */
async function initBoard() {
    await getStoredTodos();
    await addTask();
    init();
    updateHTML();
  }
  


/**
 * This function contains the subfunctions for rendering the four subboards: open, progress, feedback and closed.
 * In addition, the full name and the name abbreviation are generated by the corresponding function call.
 * Finally, the function for styling the todo divs is called.
 */
async function updateHTML() {
    renderToDos('open');
    renderToDos('progress');
    renderToDos('feedback');
    renderToDos('closed');
    //fullName();
    //abbreviation();
    styleTodos();
    //generateTodoBoxFooterBar();
    //styleTodoBoxFooterBar();
    await setItemTodo();
    //handelTodos();
}

async function setItemTodo() {
    await setItem('todos', JSON.stringify(todos));
  }
  


/**
 * This function is used to filter todos by category with subsequent generation of todo div elements.
 * 
 * @param {string} category - This parameter stands for the category of a todo and at the same time for the name of the subboard to which it belongs.
 */
function renderToDos(category) {
    
    let filteredToDos = todos.filter(t => t['category'] == category);

    document.getElementById(category).innerHTML = '';

    for (let i = 0; i < filteredToDos.length; i++) {
        const element = filteredToDos[i];
        document.getElementById(category).innerHTML += generateToDoHTML(element);
        generateToDoHTML(i);
    }  
}


/**
 * This function is used to store the currently "dragged" todo div ID in a global variable.
 * 
 * @param {number} id - This is the number of the currently dragged todo div (= ID)
 */
function startDragging(id) {
    currentDraggedElement = id;
    
}


/**
 * This function allows the drop functionality. It is a standard of the w3 consortium.
 * 
 * @param {} ev - This parameter is mandatory for the w3 consortium drop function.
 */
function allowDrop(ev) {
    ev.preventDefault();
}


/**
 * This is the "drop functionality". The current todo div is assigned the corresponding new category of the subboard.
 * Subsequently, the todo divs are regenerated; that is, updated.
 * 
 * @param {string} category - This parameter is the name of the new category
 */
async function movedTo(category) {
    todos[currentDraggedElement]['category'] = category;
    updateHTML();
    await setItemTodo();
  }
  


/**
 * This function is used to generate and return the specific HTML-Code of each todo-Div.
 * 
 * @param {string} element - This is the object with the filtered todo divs
 * @returns 
 */
function generateToDoHTML(element) {
    return `
    <div onclick="showTodo(${element['id']})" class="todo-box" draggable="true" ondragstart="startDragging(${element['id']})">
    <div id="todoBoxHeader${element['id']}" class="todo-box-header">
        <h4>${element['task-category']}</h4>
    </div>

    <div class="todo-box-title">
        <h3>${element['title']}</h3>
    </div>

    <div class="todo-box-body">
        <p>${element['text']}</p>
    </div>

    <div class="todo-box-progress">
        <div class="todo-box-progress-bar">
            <div class="todo-box-progress-bar-fill"></div>
        </div>
        <p>${element['done-fraction']} Done</p>
    </div>
    <div id="todoBoxFooterBar${element['id']}" class="todo-box-footer-bar">
    </div>
    </div>
    `;
}


/**
 * This function is used to generate the member icons for each todo div.
 */
function generateTodoBoxFooterBar() {
    for (let i = 0; i < todos.length; i++) {
        for (let j = 0; j < todos[i]['members'].length; j++) {
            let abbreviation = todos[i]['members'][j];
            document.getElementById(`todoBoxFooterBar${todos[i]['id']}`).innerHTML
                += generateHTMLTodoBoxFooterBar(abbreviation, i, j);
        }

    }
}


/**
 * This function generates the actual HTML code for the todo-box-footer-bar. The member icons are displayed.
 * 
 * @param {string} abbreviation - This input variable is the respective name abbreviation of a member of the todo container.
 * @returns 
 */
function generateHTMLTodoBoxFooterBar(abbreviation, i, j) {
    return `
    <div id="todoBoxFooter${i}${j}" class="todo-box-footer">
        <div class="todo-box-footer-left">
        <p>${abbreviation}</p>
        </div>
    </div> 
    `
}

/**
 * This function adds style elements to the todo divs.
 */
function styleTodos() {
    for (let i = 0; i < todos.length; i++) {
        const selectedColor = todos[i]['selected-color'];
        document.getElementById(`todoBoxHeader${todos[i]['id']}`).classList.add(`bg-cat-color-${selectedColor}`);
    }
}


function styleTodoBoxFooterBar() {
    for (let i = 0; i < todos.length; i++) {
        for (let j = 0; j < todos[i]['members'].length; j++) {
            const abbreviation = todos[i]['members'][j];
            const selectedColor = searchMemberSelectedColor(abbreviation);
                // console.log(abbreviation);
                // console.log(selectedColor);
            document.getElementById(`todoBoxFooter${i}${j}`).classList.add(`bg-color-${selectedColor}`)
        }
    }
}

function searchMemberSelectedColor(abbreviation) {
    for (let i = 0; i < members.length; i++) {
        const element = members[i]['abbreviation'];
        if(element == abbreviation) {
            return members[i]['selected-color'];
        }   
    }
}


/**
 * This function adds the full name to the string-object-members.
 */
function fullName() {
    for (let i = 0; i < members.length; i++) {
        let fullName = members[i]['firstName'] + ' ' + members[i]['lastName'];
        members[i]['fullName'] = fullName;
    }
}

/**
 * This function adds the name abbreviation to the object-members.
 */
function abbreviation() {
    for (let i = 0; i < members.length; i++) {
        let abbreviation = members[i]['firstName'].charAt(0) + members[i]['lastName'].charAt(0);
        members[i]['abbreviation'] = abbreviation;
    }
}
